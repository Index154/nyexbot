AWS Lightsail / Linux setup:
	Create an instance (Newest Debian version)
	Assign the IP
	Create DNS records
	Set it to make daily backups
	Download certificate for SSH login

	Put the following into /etc/apt/sources.list (will change based on the Debian version)
		deb http://deb.debian.org/debian bullseye main contrib non-free
		deb http://deb.debian.org/debian bullseye-updates main contrib non-free
		deb http://security.debian.org/debian-security bullseye-security main
		deb http://ftp.debian.org/debian bullseye-backports main contrib non-free

	sudo timedatectl set-timezone Europe/Berlin


Setting up Nyexbot:
	sudo bash
	apt update
	apt-get install npm
	mkdir nyexbot
	cd nyexbot
	npm install -g n
	n lts
	
	(Set up Git and clone the master branch of the nyexbot repository if necessary)
	
	close and re-open console
	sudo bash
	cd nyexbot
	These steps may not be necessary:
		npm i -g pm2 (this is a global install unlike the others!)
		npm install mysql2
		npm install discord.js
		npm install adc.js
	Instead do:
		npm install
		(this will basically install all necessary packages found in package.json)

	pm2 start app.js --name "app"
	pm2 startup
	pm2 save
	(Make sure this really works, may need sudo for startup or maybe not)


Setting up permissions:
	groupadd nyexadmins
	sudo usermod -a -G nyexadmins admin
	sudo usermod -a -G www-data admin
	chmod g+s /home/admin/nyextest
	chmod g+s /home/admin/nyexbot
	chmod g+s /home/admin/artificial-index
	cd /home/admin
	chgrp -R nyexadmins nyexbot
	chmod -R 770 nyexbot
	chown -R admin nyexbot
	chgrp -R nyexadmins nyextest
	chmod -R 770 nyextest
	chown -R admin nyextest
	chgrp -R www-data artificial-index

	crontab -e
	Put this in there:
		# Automatic file permission changes for Nyextest every minute
		*/1 * * * * chgrp -R nyexadmins /home/admin/nyextest && chown -R admin /home/admin/nyextest


Setting up Apache (artificial-index.com):
	sudo bash
	apt-get install php
	mkdir artificial-index
	
	Get all of the files and put them into artificial-index
	Check apache status: systemctl status apache2
	
	Edit these files:
	nano /etc/apache2/sites-enabled/000-default.conf
		(change documentroot to /home/admin/artificial-index)
	nano /etc/apache2/sites-enabled/default-ssl.conf
		(change documentroot to /home/admin/artificial-index)
	nano /etc/apache2/apache2.conf
		(add directory /home/admin/artificial-index path with allowoverride all)
	nano /etc/apache2/conf-enabled/security.config
		(activate security options)
	
	sudo a2enmod headers
	sudo a2enmod rewrite
	sudo a2enmod ssl
	sudo systemctl restart apache2

	cd /home/admin
	chgrp -R www-data artificial-index
	chmod -R 770 artificial-index
	
	Set up SSL:
		https://certbot.eff.org/instructions?ws=apache&os=debianbuster
		https://www.linkedin.com/pulse/ssl-configuration-apache-sachila-ranawaka

	Apache error logging:
		tail -f /var/log/apache2/error.log


Setting up MySQL:
	sudo bash
	sudo useradd user
	sudo passwd user
	
	Enter password twice
	
	sudo usermod -aG sudo user
	
	restart the machine
	
	Other articles about it (slightly old):
		https://www.digitalocean.com/community/tutorials/how-to-install-the-latest-mysql-on-debian-10
		https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-20-04
	
	(How to use: mysql -u root -p)


VSCode OpenSSH setup on a client machine:
	Install VSCode
	Install Remote Development extension pack
	Make sure OpenSSH Client feature is enabled on Windows
	Save private key for SSH from AWS in C:/Users/username
	Open VSCode
	Press F1
	Select "Remote-SSH: Open SSH Configuration File..."
	Select the config file in the user path
	Paste the following:
		Host artificial-index.com
		  HostName artificial-index.com
		  User admin
		  IdentityFile C:/Users/username/keyfile.pem
		  
	"Remote-SSH: Connect to Host..." can now be used to connect
	The toolbar option "Terminal" > "New Terminal" can be used to open a regular SSH terminal


Atop for performance logging:
	sudo apt-get install atop
	sudo update-rc.d atop defaults
	Add INTERVAL=60 to /etc/atoprc
	systemctl restart atop
	Use atop -r to view current log file (or an older one by supplying a path) (logs location: /var/log/atop)


Making a swap partition to reduce RAM strain:
	sudo fallocate -l 4G /swapfile
	sudo chmod 600 /swapfile
	sudo mkswap /swapfile
	sudo nano /etc/fstab
		Add this line: /swapfile swap swap defaults 0 0
	echo vm.swappiness=40 | sudo tee -a /etc/sysctl.conf


Git:
	In VScode get the "GitHub Pull Requests and Issues" extension
	On the server do
		sudo bash
		apt update
		apt install git
		git config --global user.email "email@mail.com"
		git config --global user.name "Index154"
	In VScode:
		Go to the Source Control tab
		Click on the context menu
		Remote > Add Remote...
		Enter https://github.com/Index154/nyexbot
		For name just do nyexbot
	

Commands for managing the Git repository:
	Ignoring a file or folder:
		Add it to .gitignore
		git rm --cached /path
		Commit it
	Removing stuff from the commit history:
		Do the above steps if you need to remove entire files from the current commit
		cd /home/admin
		mkdir cleaning
		cd cleaning
		wget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar
		apt install default-jre
		java -version
		touch expressions.txt
		vim expressions.txt (and add this text into it:)
			regex:password:.*
			regex:link: \".*\"
		git clone --mirror git@github.com:Index154/nyexbot.git
		java -jar bfg.jar --delete-files config.json nyexbot.git
		java -jar bfg.jar --replace-text expressions.txt nyexbot.git
		cd nyexbot.git
		git reflog expire --expire=now --all && git gc --prune=now --aggressive
		Make a new github SSH key with push access (see the section below)
		git push
		apt remove default-jre
		apt autoremove


Automatic Git pulls for production environment:
	sudo bash
	cd /root/.ssh
	ssh-keygen -t rsa
		(Enter key name: gitkey)
		(Enter no passphrase)
	less gitkey.pub
		Copy the contents of the public key and add the key to the repository on GitHub
	touch config
	vim config
	Paste the following into the file:
		Host github.com
		IdentityFile /root/.ssh/gitkey
	Test connection with: ssh -T git@github.com
	Make git use SSH for the directory:
		cd /home/admin/nyexbot
		git remote set-url nyexbot git@github.com:Index154/nyexbot.git
		(Alternative: git remote set-url nyexbot https://github.com/Index154/nyexbot)
	Test pull action:
		git pull -q nyexbot master
	git config --global --add safe.directory /home/admin/nyexbot
	crontab -e
	Add this text:
		# Automatic Github pulls for main Nyexbot once per minute
		*/1 * * * * cd /home/admin/nyexbot && git pull -q origin master >> /var/log/syslog 2>&1
	
	Automatic app restart after every merge:
		sudo bash
		cd /home/admin/nyexbot/.git/hooks
		touch post-merge
		chmod +x post-merge
		vim post-merge
		Put this in there:
			#! /bin/sh
			/usr/local/bin/pm2 restart app

	If the cron restart job stops working:
		check /var/log/syslog to see what file causes the issue. Usually the cause are file changes in the main branch
		git stash
		fix whatever modified the file in the main bot environment


Change TLS settings:
	sudo bash
	apt-get install libapache2-mod-security2
	a2enmod rewrite ssl security2
	systemctl restart apache2

	vim /etc/apache2/sites-available/default-ssl.conf

	Make sure the following are set correctly:
		SSLProtocol -all +TLSv1.2 +TLSv1.3
		SSLHonorCipherOrder on

	vim /etc/apache2/mods-available/ssl.conf

	Make sure the following are set correctly:
		SSLProtocol -all +TLSv1.2 +TLSv1.3
		SSLHonorCipherOrder on
		SSLCipherSuite ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS

	systemctl restart apache2


Renewing SSL cert (happens automatically too - maybe needs a one-time setup in a new environment):
	sudo bash
	sudo certbot -d artificial-index.com -d *.artificial-index.com --manual --preferred-challenges dns certonly
		Then follow the instructions by creating TXT records in AWS
	sudo service apache2 restart


Daily automatic reboot at 4 AM:
	sudo crontab -e
	Add this to the file:
		0 4 * * * /sbin/shutdown -r now


Random useful commands:
	ps aux | greg php 			(shows the IDs of running scripts and other info behind it) 
	kill -9 [ID] 				(kills a script by ID)
	du -sh [folder or file]		(shows the size of a file or folder)


Obtain ownership of folders created by the bot for manual editing:
	sudo bash
	chown -R admin /home/admin/nyexbot


Maintenance commands:

sudo bash
apt update
npm update
npm i -g npm@latest
cd /home/admin/nyexbot
npm update
apt upgrade
n latest